"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPlusFileExport = void 0;
const utils_js_1 = require("../utils.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const EXPORTS_IGNORE = [
    // vite-plugin-solid adds `export { $$registrations }`
    '$$registrations',
    // @vitejs/plugin-vue adds `export { _rerender_only }`
    '_rerender_only'
];
// Tolerate `export { frontmatter }` in .mdx files
const TOLERATE_SIDE_EXPORTS = ['.md', '.mdx'];
function assertPlusFileExport(fileExports, filePathToShowToUser, configName) {
    const exportsAll = Object.keys(fileExports).filter((exportName) => !EXPORTS_IGNORE.includes(exportName));
    const exportsInvalid = exportsAll.filter((e) => e !== 'default' && e !== configName);
    if (exportsInvalid.length === 0) {
        if (exportsAll.length === 1) {
            return;
        }
        const exportDefault = picocolors_1.default.cyan('export default');
        const exportNamed = picocolors_1.default.cyan(`export { ${configName} }`);
        if (exportsAll.length === 0) {
            (0, utils_js_1.assertUsage)(false, `${filePathToShowToUser} doesn't export any value, but it should have a ${exportNamed} or ${exportDefault}`);
        }
        else {
            (0, utils_js_1.assert)(exportsAll.length === 2); // because `exportsInvalid.length === 0`
            (0, utils_js_1.assertWarning)(false, `The exports of ${filePathToShowToUser} are ambiguous: remove ${exportDefault} or ${exportNamed}`, { onlyOnce: true });
        }
    }
    else {
        if (TOLERATE_SIDE_EXPORTS.some((ext) => filePathToShowToUser.endsWith(ext)))
            return;
        exportsInvalid.forEach((exportInvalid) => {
            (0, utils_js_1.assertWarning)(false, `${filePathToShowToUser} should have only one export: move ${picocolors_1.default.cyan(`export { ${exportInvalid} }`)} to its own +${exportsInvalid}.js file`, { onlyOnce: true });
        });
    }
}
exports.assertPlusFileExport = assertPlusFileExport;
