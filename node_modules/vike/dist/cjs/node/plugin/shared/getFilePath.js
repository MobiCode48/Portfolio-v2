"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePathAbsoluteUserRootDir = exports.cleanFilePathUnkown = exports.getFilePathToShowToUserFromUnkown = exports.getModuleFilePath = exports.getFilePathUnresolved = exports.getFilePathResolved = void 0;
const path_1 = __importDefault(require("path"));
const utils_js_1 = require("../utils.js");
function getFilePathResolved(args) {
    const { userRootDir } = args;
    let filePathAbsoluteFilesystem;
    let filePathAbsoluteUserRootDir;
    if ('filePathAbsoluteFilesystem' in args) {
        filePathAbsoluteFilesystem = args.filePathAbsoluteFilesystem;
        filePathAbsoluteUserRootDir = getFilePathAbsoluteUserRootDir({ filePathAbsoluteFilesystem, userRootDir });
    }
    else {
        filePathAbsoluteUserRootDir = args.filePathAbsoluteUserRootDir;
        filePathAbsoluteFilesystem = getFilePathAbsoluteUserFilesystem({ filePathAbsoluteUserRootDir, userRootDir });
    }
    (0, utils_js_1.assert)(filePathAbsoluteFilesystem);
    (0, utils_js_1.assertPathFilesystemAbsolute)(filePathAbsoluteFilesystem);
    const filePathToShowToUserResolved = filePathAbsoluteUserRootDir || filePathAbsoluteFilesystem;
    (0, utils_js_1.assert)(filePathToShowToUserResolved);
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteFilesystem);
    const fileName = path_1.default.posix.basename(filePathAbsoluteFilesystem);
    const filePathResolved = {
        ...getComputedProps(args),
        filePathAbsoluteFilesystem,
        filePathToShowToUserResolved,
        fileName
    };
    return filePathResolved;
}
exports.getFilePathResolved = getFilePathResolved;
function getComputedProps(args) {
    if ('filePathAbsoluteUserRootDir' in args) {
        const importPathAbsolute = args.importPathAbsolute ?? null;
        const { filePathAbsoluteUserRootDir } = args;
        if (importPathAbsolute)
            (0, utils_js_1.assertIsNpmPackageImport)(importPathAbsolute);
        return {
            importPathAbsolute,
            filePathAbsoluteUserRootDir,
            filePathAbsoluteVite: filePathAbsoluteUserRootDir,
            filePathToShowToUser: filePathAbsoluteUserRootDir
        };
    }
    else {
        return getComputedPropsImportPathAbsolute(args);
    }
}
function getComputedPropsImportPathAbsolute(args) {
    const { importPathAbsolute } = args;
    (0, utils_js_1.assertIsNpmPackageImport)(importPathAbsolute);
    return {
        filePathAbsoluteUserRootDir: null,
        importPathAbsolute,
        filePathAbsoluteVite: importPathAbsolute,
        filePathToShowToUser: importPathAbsolute
    };
}
function getFilePathUnresolved(args) {
    return {
        ...getComputedPropsImportPathAbsolute(args),
        filePathAbsoluteFilesystem: null
    };
}
exports.getFilePathUnresolved = getFilePathUnresolved;
function getFilePathAbsoluteUserFilesystem({ filePathAbsoluteUserRootDir, userRootDir }) {
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteUserRootDir);
    (0, utils_js_1.assertPosixPath)(userRootDir);
    (0, utils_js_1.assertPathFilesystemAbsolute)(userRootDir);
    const filePathAbsoluteFilesystem = path_1.default.posix.join(userRootDir, filePathAbsoluteUserRootDir);
    (0, utils_js_1.assertPathFilesystemAbsolute)(userRootDir);
    return filePathAbsoluteFilesystem;
}
function getFilePathAbsoluteUserRootDir({ filePathAbsoluteFilesystem, userRootDir }) {
    (0, utils_js_1.assertPosixPath)(filePathAbsoluteFilesystem);
    (0, utils_js_1.assertPosixPath)(userRootDir);
    (0, utils_js_1.assertPathFilesystemAbsolute)(filePathAbsoluteFilesystem);
    (0, utils_js_1.assertPathFilesystemAbsolute)(userRootDir);
    const filePathRelative = path_1.default.posix.relative(userRootDir, filePathAbsoluteFilesystem);
    if (!filePathAbsoluteFilesystem.startsWith(userRootDir)) {
        (0, utils_js_1.assert)(filePathRelative.startsWith('../'));
        return null;
    }
    (0, utils_js_1.assert)(!filePathRelative.startsWith('/') &&
        /* Not true if filePathRelative starts with a hidden directory  (i.e. a directory with a name that starts with `.`)
        !filePathRelative.startsWith('.') &&
        */
        !filePathRelative.startsWith('./') &&
        !filePathRelative.startsWith('../'));
    const filePathAbsoluteUserRootDir = `/${filePathRelative}`;
    (0, utils_js_1.assert)(filePathAbsoluteUserRootDir === getFilePathAbsoluteUserRootDir2(filePathAbsoluteFilesystem, userRootDir));
    return filePathAbsoluteUserRootDir;
}
exports.getFilePathAbsoluteUserRootDir = getFilePathAbsoluteUserRootDir;
function getModuleFilePath(moduleId, config) {
    const userRootDir = config.root;
    (0, utils_js_1.assertPosixPath)(moduleId);
    (0, utils_js_1.assertPosixPath)(userRootDir);
    const filePathAbsoluteFilesystem = cleanModuleId(moduleId);
    (0, utils_js_1.assertPathFilesystemAbsolute)(filePathAbsoluteFilesystem);
    const filePathAbsoluteUserRootDir = getFilePathAbsoluteUserRootDir({ filePathAbsoluteFilesystem, userRootDir });
    return filePathAbsoluteUserRootDir || filePathAbsoluteFilesystem;
}
exports.getModuleFilePath = getModuleFilePath;
function getFilePathToShowToUserFromUnkown(
// We don't have any guarentee about filePath, e.g. about whether is filePathAbsoluteFilesystem or filePathAbsoluteUserRootDir
filePathUnkown, userRootDir) {
    (0, utils_js_1.assertPosixPath)(userRootDir);
    (0, utils_js_1.assertPathFilesystemAbsolute)(userRootDir);
    filePathUnkown = cleanFilePathUnkown(filePathUnkown);
    if (!filePathUnkown.startsWith(userRootDir)) {
        return filePathUnkown;
    }
    else {
        return getFilePathAbsoluteUserRootDir2(filePathUnkown, userRootDir);
    }
}
exports.getFilePathToShowToUserFromUnkown = getFilePathToShowToUserFromUnkown;
function getFilePathAbsoluteUserRootDir2(filePathAbsoluteFilesystem, userRootDir) {
    (0, utils_js_1.assert)(filePathAbsoluteFilesystem.startsWith(userRootDir));
    let filePathAbsoluteUserRootDir = filePathAbsoluteFilesystem.slice(userRootDir.length);
    if (!filePathAbsoluteUserRootDir.startsWith('/'))
        filePathAbsoluteUserRootDir = '/' + filePathAbsoluteUserRootDir;
    return filePathAbsoluteUserRootDir;
}
function cleanFilePathUnkown(filePathUnknown) {
    filePathUnknown = (0, utils_js_1.toPosixPath)(filePathUnknown);
    filePathUnknown = cleanModuleId(filePathUnknown);
    return filePathUnknown;
}
exports.cleanFilePathUnkown = cleanFilePathUnkown;
function cleanModuleId(moduleId) {
    // remove query
    const parts = moduleId.split('?');
    if (parts.length > 1)
        parts.pop();
    (0, utils_js_1.assert)(parts.length >= 1);
    return parts.join('?');
}
