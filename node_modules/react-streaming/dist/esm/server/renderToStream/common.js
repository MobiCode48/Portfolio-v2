import { assert, assertUsage, createDebugger } from '../utils';
export const debugFlow = createDebugger('react-streaming:flow');
// Needed for the hacky solution to workaround https://github.com/facebook/react/issues/24536
export function afterReactBugCatch(fn) {
    setTimeout(() => {
        fn();
    }, 0);
}
export function assertReactImport(fn, fnName) {
    assert(typeof fn === 'function');
    assertUsage(fn, `Couldn't import ${fnName}() from 'react-dom'`);
}
export function wrapStreamEnd(streamEnd, didError) {
    return (streamEnd
        // Needed because of the `afterReactBugCatch()` hack above, otherwise `onBoundaryError` triggers after `streamEnd` resolved
        .then(() => new Promise((r) => setTimeout(r, 0)))
        .then(() => !didError));
}
export function startTimeout(abortFn, options) {
    var _a;
    let stopTimeout;
    if (options.timeout !== null) {
        const t = setTimeout(() => {
            var _a;
            abortFn();
            (_a = options.onTimeout) === null || _a === void 0 ? void 0 : _a.call(options);
        }, ((_a = options.timeout) !== null && _a !== void 0 ? _a : 20) * 1000);
        stopTimeout = () => {
            clearTimeout(t);
        };
    }
    return stopTimeout;
}
