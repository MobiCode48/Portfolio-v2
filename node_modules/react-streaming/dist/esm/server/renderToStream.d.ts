export { renderToStream };
export { disable };
export { renderToNodeStream_set };
export { renderToWebStream_set };
import React from 'react';
import type { renderToPipeableStream as RenderToPipeableStream, RenderToPipeableStreamOptions, renderToReadableStream as RenderToReadableStream, RenderToReadableStreamOptions } from 'react-dom/server';
import type { Pipe } from './renderToStream/createPipeWrapper';
import { SeoStrategy } from './renderToStream/resolveSeoStrategy';
import type { renderToNodeStream as renderToNodeStream_ } from './renderToStream/renderToNodeStream';
import type { renderToWebStream as renderToWebStream_ } from './renderToStream/renderToWebStream';
export declare type StreamOptions = Omit<RenderToPipeableStreamOptions, 'onShellReady' | 'onShellError' | 'onError' | 'onAllReady'> | Omit<RenderToReadableStreamOptions, 'onError' | 'signal'>;
declare type Options = {
    webStream?: boolean;
    disable?: boolean;
    seoStrategy?: SeoStrategy;
    userAgent?: string;
    onBoundaryError?: (err: unknown) => void;
    streamOptions?: StreamOptions;
    timeout?: number | null;
    onTimeout?: () => void;
    renderToReadableStream?: typeof RenderToReadableStream;
    renderToPipeableStream?: typeof RenderToPipeableStream;
};
declare type Result = ({
    pipe: Pipe;
    readable: null;
} | {
    pipe: null;
    readable: ReadableStream;
}) & {
    streamEnd: Promise<boolean>;
    disabled: boolean;
    injectToStream: (chunk: unknown) => void;
    abort: () => void;
};
declare function disable(): void;
declare function renderToStream(element: React.ReactNode, options?: Options): Promise<Result>;
declare function renderToNodeStream_set(renderToNodeStream: typeof renderToNodeStream_): void;
declare function renderToWebStream_set(renderToWebStream: typeof renderToWebStream_): void;
