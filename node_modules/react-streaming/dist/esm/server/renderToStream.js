export { renderToStream };
export { disable };
export { renderToNodeStream_set };
export { renderToWebStream_set };
import React from 'react';
import ReactDOMServer, { version as reactDomVersion } from 'react-dom/server';
import { SuspenseData } from './useAsync/useSuspenseData';
import { StreamProvider } from './useStream';
import { resolveSeoStrategy } from './renderToStream/resolveSeoStrategy';
import { assert, assertUsage, getGlobalObject } from './utils';
import { debugFlow } from './renderToStream/common';
const globalObject = getGlobalObject('renderToStream.ts', {
    renderToNodeStream: null,
    renderToWebStream: null,
});
assertReact();
const globalConfig = (globalThis.__react_streaming = globalThis
    .__react_streaming || {
    disable: false,
});
function disable() {
    globalConfig.disable = true;
}
async function renderToStream(element, options = {}) {
    var _a, _b;
    // Let's see if a user complains
    assertUsage(!options.renderToPipeableStream && !options.renderToReadableStream, 'using deprecated options');
    element = React.createElement(SuspenseData, null, element);
    let injectToStream = (chunk) => buffer.push(chunk);
    const buffer = [];
    element = React.createElement(StreamProvider, {
        value: {
            injectToStream: (chunk) => {
                injectToStream(chunk);
            },
        },
    }, element);
    const disable = globalConfig.disable || ((_a = options.disable) !== null && _a !== void 0 ? _a : resolveSeoStrategy(options).disableStream);
    const webStream = (_b = options.webStream) !== null && _b !== void 0 ? _b : !globalObject.renderToNodeStream;
    debugFlow(`disable === ${disable} && webStream === ${webStream}`);
    let result;
    const resultPartial = { disabled: disable };
    if (!webStream) {
        result = { ...resultPartial, ...(await globalObject.renderToNodeStream(element, disable, options)) };
    }
    else {
        assert(globalObject.renderToWebStream);
        result = { ...resultPartial, ...(await globalObject.renderToWebStream(element, disable, options)) };
    }
    injectToStream = result.injectToStream;
    buffer.forEach((chunk) => injectToStream(chunk));
    buffer.length = 0;
    debugFlow('promise `await renderToStream()` resolved');
    return result;
}
function renderToNodeStream_set(renderToNodeStream) {
    globalObject.renderToNodeStream = renderToNodeStream;
}
function renderToWebStream_set(renderToWebStream) {
    globalObject.renderToWebStream = renderToWebStream;
}
// To debug wrong peer dependency loading:
//  - https://stackoverflow.com/questions/21056748/seriously-debugging-node-js-cannot-find-module-xyz-abcd
//  - https://stackoverflow.com/questions/59865584/how-to-invalidate-cached-require-resolve-results
function assertReact() {
    const versionMajor = parseInt(reactDomVersion.split('.')[0], 10);
    assertUsage(versionMajor >= 18, `\`react-dom@${reactDomVersion}\` was loaded, but react-streaming only works with React version 18 or greater.`);
    assert(typeof ReactDOMServer.renderToPipeableStream === 'function' ||
        typeof ReactDOMServer.renderToReadableStream === 'function');
}
